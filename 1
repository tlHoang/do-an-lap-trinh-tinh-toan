[1mdiff --git a/do-an.c b/do-an.c[m
[1mindex 0ae0b2a..81d56f3 100644[m
[1m--- a/do-an.c[m
[1m+++ b/do-an.c[m
[36m@@ -1,6 +1,6 @@[m
 #include <stdio.h>[m
 #include <stdlib.h> //exit()[m
[31m-#include <string.h> //strcpy()[m
[32m+[m[32m//#include <string.h>[m
 //#include <ctype.h>[m
 [m
 #define MAX 100[m
[36m@@ -10,11 +10,13 @@[m [mvoid open_file(FILE **f, char* file_name, char *mode);[m
 void input_transaction_code();[m
 void print_menu(char name[][MAX], double cost[], int number_of_dishes, int index[]);[m
 void order(char name[][MAX], double cost[MAX], int index[MAX], int number_of_dishes);[m
[31m-int simplify_string_to_number(char string[]);[m
[32m+[m[32mint string_to_number(char string[]);[m
 int string_length(char string[]);[m
 int string_compare(char string_1[], char string_2[]);[m
[32m+[m[32mvoid string_copy(char des[], char src[]);[m
 void remove_newline(char string[]);[m
 int check_order(int tmp[], int n);[m
[32m+[m[32mvoid wait(char name[][MAX], double cost[], int number_of_dishes, int index[], char transaction_code[]);[m
 [m
 int main() {[m
 	char name[MAX][MAX], transaction_code[100] = "12345";[m
[36m@@ -23,12 +25,9 @@[m [mint main() {[m
 	int number_of_dishes;[m
 [m
 	read_menu(name, cost, index, &number_of_dishes);[m
[31m-[m
 //	input_transaction_code(&transaction_code);[m
[31m-[m
[31m-	print_menu(name, cost, number_of_dishes, index);[m
[31m-[m
[31m-	order(name, cost, index, number_of_dishes);[m
[32m+[m[32m//	print_menu(name, cost, number_of_dishes, index);[m
[32m+[m	[32mwait(name, cost, number_of_dishes, index, transaction_code);[m
 //	for (int i = 0; i < 5; i++) {[m
 //		printf("%d", name[i]);[m
 //	}[m
[36m@@ -41,17 +40,16 @@[m [mvoid read_menu(char name[][MAX], double cost[], int index[], int* i) {[m
 	open_file(&f, "menu.txt", "r");[m
 	char line[MAX];[m
 [m
[31m-	printf("==============MENU==============\n\n\n");[m
 	while (!feof(f)) {[m
 		fgets(line, MAX, f);[m
[31m-		index[*i] = simplify_string_to_number(line);[m
[32m+[m		[32mindex[*i] = string_to_number(line);[m
 [m
 		fgets(line, MAX, f);[m
[31m-		strcpy(name[*i], line);[m
[32m+[m		[32mstring_copy(name[*i], line);[m
 		remove_newline(name[*i]);[m
 [m
 		fgets(line, MAX, f);[m
[31m-		cost[*i] = simplify_string_to_number(line);[m
[32m+[m		[32mcost[*i] = string_to_number(line);[m
 [m
 		fgets(line, MAX, f);[m
 [m
[36m@@ -75,6 +73,7 @@[m [mvoid input_transaction_code(char* code) {[m
 	system("cls");[m
 }[m
 void print_menu(char name[][MAX], double cost[], int number_of_dishes, int index[]) {[m
[32m+[m	[32mprintf("==============MENU==============\n\n\n");[m
 	printf("ID   NAME:\t\tCOST:\n");[m
 	for (int i = 0; i < number_of_dishes; i++) {[m
 		printf("[%d]  ", index[i]); puts(name[i]); printf("\t\t\t%.0lf", cost[i]); printf("\n");[m
[36m@@ -91,7 +90,7 @@[m [mvoid order(char name[][MAX], double cost[MAX], int index[MAX], int number_of_dis[m
 	for (i = 0; ; i++) {[m
 		fgets(input, sizeof(input), stdin);[m
 		if ((input[0] >= '0' && input[0] <= '9') || input[0] == '-') {[m
[31m-			tmp = simplify_string_to_number(input) - 1;[m
[32m+[m			[32mtmp = string_to_number(input) - 1;[m
 			if (tmp == -1) break;[m
 			if (tmp == -2) {[m
 				i--;[m
[36m@@ -123,7 +122,7 @@[m [mvoid order(char name[][MAX], double cost[MAX], int index[MAX], int number_of_dis[m
 		printf("%s\n", name[order[j]]);[m
 	}[m
 }[m
[31m-int simplify_string_to_number(char string[]) {[m
[32m+[m[32mint string_to_number(char string[]) {[m
 	int result = 0, sign = 1, i = 0;[m
 	remove_newline(string);[m
 	if (string[0] == '-') {[m
[36m@@ -157,6 +156,15 @@[m [mint string_compare(char string_1[], char string_2[]) {[m
 		return 0;[m
 	}[m
 }[m
[32m+[m[32mvoid string_copy(char des[], char src[]) {[m
[32m+[m	[32mremove_newline(des);[m
[32m+[m	[32mremove_newline(src);[m
[32m+[m	[32mint i;[m
[32m+[m	[32mfor (i = 0; src[i] != '\0'; i++) {[m
[32m+[m		[32mdes[i] = src[i];[m
[32m+[m	[32m}[m
[32m+[m	[32mdes[i] = '\0';[m
[32m+[m[32m}[m
 void remove_newline(char string[]) {[m
 	size_t ln;[m
 	ln = string_length(string) - 1;[m
[36m@@ -167,4 +175,17 @@[m [mint check_order(int tmp[], int n) {[m
 	for (int i = 0; i < n; i++) {[m
 		printf("%d", tmp[i]);[m
 	}[m
[32m+[m	[32mreturn 0;[m
[32m+[m[32m}[m
[32m+[m[32mvoid wait(char name[][MAX], double cost[], int number_of_dishes, int index[], char transaction_code[]) {[m
[32m+[m	[32mint input = 1;[m
[32m+[m	[32mwhile (1) {[m
[32m+[m		[32mprintf("Press '1' to order and '0' to end.\n");[m
[32m+[m		[32mscanf("%d", &input);[m
[32m+[m		[32mfflush(stdin);[m
[32m+[m		[32mif (input == 1) {[m
[32m+[m			[32mprint_menu(name, cost, number_of_dishes, index);[m
[32m+[m			[32morder(name, cost, index, number_of_dishes);[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
 }[m
[1mdiff --git a/menu.txt b/menu.txt[m
[1mindex 3aac723..7910971 100644[m
[1m--- a/menu.txt[m
[1m+++ b/menu.txt[m
[36m@@ -7,7 +7,7 @@[m [mcom canh[m
 150000[m
 [m
 3[m
[31m-com thit xuon[m
[32m+[m[32mcom thit suon[m
 50000[m
 [m
 4[m
[36m@@ -23,7 +23,7 @@[m [mcom canh[m
 150000[m
 [m
 7[m
[31m-com thit xuon[m
[32m+[m[32mcom thit suon[m
 50000[m
 [m
 8[m
[36m@@ -39,7 +39,7 @@[m [mcom canh[m
 150000[m
 [m
 11[m
[31m-com thit xuon[m
[32m+[m[32mcom thit suon[m
 50000[m
 [m
 12[m
[36m@@ -55,7 +55,7 @@[m [mcom canh[m
 150000[m
 [m
 15[m
[31m-com thit xuon[m
[32m+[m[32mcom thit suon[m
 50000[m
 [m
 16[m
[36m@@ -71,9 +71,9 @@[m [mcom canh[m
 150000[m
 [m
 19[m
[31m-com thit xuon[m
[32m+[m[32mcom thit suon[m
 50000[m
 [m
 20[m
 canh[m
[31m-120000[m
[32m+[m[32m120000[m
\ No newline at end of file[m
